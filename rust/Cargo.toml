[package]
name = "folkfriend"
version = "3.0.1"
authors = ["Tom Wyllie <tom@wyllie.dev>"]
edition = "2018"
description = "Transcription and recognition of traditional instrumental folk music"
documentation = "https://github.com/TomWyllie/folkfriend/blob/master/README.md"
repository = "https://github.com/TomWyllie/folkfriend"
license = "GPL-3.0-only"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
name = "folkfriend"
path = "src/lib.rs"
crate-type = ["cdylib", "rlib"]

[[bin]]
name = "folkfriend"
path = "src/bin.rs"

[dependencies]
aho-corasick = "0.7.18"
clap = "3.0.0-beta.4"
csv = "1.1"
dirs = "4.0.0"
fnv = "1.0.7"
image = "0.23.14"
indicatif = "0.16.2"
js-sys = "0.3.55"
rayon = "1.5"
reqwest = { version = "0.11.4", features = ["blocking"] }
rustfft = "6.0.1"
serde = { version = "1.0.126", features = ["derive"] }
serde-wasm-bindgen = "0.3.1"
serde_json = "1.0"
wasm-bindgen = { version = "0.2", features = ["serde-serialize"] }
wav = "1.0.0"

# wasm-pack bugfix. See https://github.com/rustwasm/wasm-pack/issues/886, https://stackoverflow.com/questions/64507718/why-does-wasm-opt-fail-in-wasm-pack-builds-when-generating-a-function-returning
#[package.metadata.wasm-pack.profile.release]
#wasm-opt = ["-Oz", "--enable-mutable-globals"]

[package.metadata.wasm-pack.profile.release]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
# wasm-opt = ['-Os']
wasm-opt = false
