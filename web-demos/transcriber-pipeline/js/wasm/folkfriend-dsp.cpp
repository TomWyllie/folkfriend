#include <emscripten.h>
#include <math.h>
#include <algorithm>
#include <iterator>
#include "kissfft/kiss_fftr.h"

// Corresponds to k = 1/3. See processFreqData().
float powBase = cbrt(10.0);

// MUST be
//  FFConfig.SPEC_WINDOW_SIZE / 2.
//  and FFConfig.SPEC_WINDOW_SIZE.
//  Hardcode it here for simplicity.
int hsize = 512;
int size = 1024;

// Linear resampling code (hardcoded for simplicity)
// The following code is generated by scripts/misc/linear-interpolator.py

// Begin
int numResampledBins = 240;
int loIndices[240] = {24, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 49, 49, 50, 50, 51, 51, 52, 53, 53, 54, 54, 55, 56, 56, 57, 58, 58, 59, 60, 60, 61, 62, 62, 63, 64, 65, 65, 66, 67, 68, 68, 69, 70, 71, 72, 72, 73, 74, 75, 76, 77, 78, 79, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 132, 133, 135, 136, 138, 140, 141, 143, 144, 146, 148, 150, 151, 153, 155, 157, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 193, 195, 197, 199, 202, 204, 206, 209, 211, 214, 216, 219, 221, 224, 226, 229, 232, 234, 237, 240, 243, 245, 248, 251, 254, 257, 260, 263, 266, 269, 272, 275, 279, 282, 285, 288, 292, 295, 299, 302, 306, 309, 313, 316, 320, 324, 327, 331, 335, 339, 343, 347, 351, 355, 359, 363, 367, 372, 376};
float loWeights[240] = {0.74633077, 0.01852894, 0.30152474, 0.58452054, 0.86751634, 0.15665717, 0.45120696, 0.74575676, 0.0418876, 0.34799127, 0.65409495, 0.96019862, 0.27635378, 0.59401122, 0.91166867, 0.23766706, 0.56687819, 0.89608931, 0.23320732, 0.57397204, 0.91473677, 0.2641642, 0.61648245, 0.9688007, 0.3316493, 0.695521, 0.0612785, 0.4367036, 0.8121287, 0.19332558, 0.58030402, 0.96728246, 0.36483739, 0.76336912, 0.16659427, 0.57667923, 0.98676419, 0.40802946, 0.82966762, 0.25819172, 0.69138303, 0.12789672, 0.57264115, 0.01783721, 0.47413473, 0.93043225, 0.39652143, 0.86437201, 0.34042643, 0.81983003, 0.30644477, 0.79740137, 0.29514349, 0.79765306, 0.30706352, 0.82112605, 0.34272153, 0.86833698, 0.40261142, 0.93977978, 0.48720587, 0.03668354, 0.59695766, 0.1604739, 0.73230087, 0.31027226, 0.89365207, 0.48647867, 0.08299221, 0.68947766, 0.30160083, 0.91963907, 0.54772794, 0.1805727, 0.8217165, 0.47120056, 0.1260901, 0.79033941, 0.462495, 0.14066121, 0.82801598, 0.52403285, 0.22662548, 0.93708569, 0.65807555, 0.38617014, 0.12162142, 0.86673971, 0.62134455, 0.38378698, 0.15429659, 0.9340729, 0.72442515, 0.52328365, 0.33085847, 0.14735371, 0.97334063, 0.81050733, 0.65698575, 0.51296357, 0.37862343, 0.25414311, 0.13969575, 0.03545004, 0.94230534, 0.85997826, 0.78817744, 0.72705915, 0.6767758, 0.63747613, 0.60930531, 0.59240507, 0.58691383, 0.5929668, 0.6106961, 0.64023088, 0.68169739, 0.73521909, 0.80091675, 0.87890852, 0.96931002, 0.07299083, 0.18973864, 0.31933497, 0.46188394, 0.6174876, 0.78624594, 0.968257, 0.16519775, 0.37598376, 0.60039603, 0.83852357, 0.09128741, 0.35952589, 0.64181954, 0.93824953, 0.2510885, 0.57884769, 0.92105382, 0.28014532, 0.65458061, 0.04411573, 0.45141591, 0.87365778, 0.3134047, 0.76931145, 0.24230367, 0.73244237, 0.23978751, 0.76469913, 0.30745445, 0.86765564, 0.44683141, 0.04312527, 0.65937869, 0.29368055, 0.94649418, 0.61970327, 0.31163009, 0.02264741, 0.75474767, 0.50663054, 0.27849313, 0.07067501, 0.88424202, 0.7190731, 0.57503511, 0.45243865, 0.3515867, 0.27277493, 0.21629195, 0.18241955, 0.17143294, 0.18360101, 0.2191865, 0.27844624, 0.36163132, 0.46898732, 0.60075445, 0.75716775, 0.93845723, 0.14560444, 0.37850674, 0.63705304, 0.92145267, 0.2330674, 0.5714363, 0.93635877, 0.32960697, 0.75018981, 0.19891157, 0.67629433, 0.18215893, 0.71742864, 0.28202928, 0.876224, 0.50108293, 0.15586826, 0.84176809, 0.55911108, 0.30771291, 0.08805028, 0.90099306, 0.74680301, 0.62556325, 0.53770929, 0.48366635, 0.4638497, 0.478665, 0.52850864, 0.61376806, 0.73482202, 0.89204093, 0.08609624, 0.31754304, 0.58633244, 0.8928016, 0.23809743, 0.62220559, 0.04521921, 0.50867919, 0.01164082, 0.55608645, 0.14112457, 0.76811598, 0.43726417, 0.1487525, 0.90349581, 0.70211281, 0.54473683, 0.43194681, 0.36430803, 0.34237255, 0.36667969, 0.43775644, 0.55611794, 0.72226779, 0.93669849, 0.20043132, 0.51368708};
int hiIndices[240] = {23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 32, 32, 32, 33, 33, 33, 34, 34, 35, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 48, 48, 49, 49, 50, 50, 51, 52, 52, 53, 53, 54, 55, 55, 56, 57, 57, 58, 59, 59, 60, 61, 61, 62, 63, 64, 64, 65, 66, 67, 67, 68, 69, 70, 71, 71, 72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 110, 111, 112, 114, 115, 116, 118, 119, 121, 122, 123, 125, 126, 128, 129, 131, 132, 134, 135, 137, 139, 140, 142, 143, 145, 147, 149, 150, 152, 154, 156, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 192, 194, 196, 198, 201, 203, 205, 208, 210, 213, 215, 218, 220, 223, 225, 228, 231, 233, 236, 239, 242, 244, 247, 250, 253, 256, 259, 262, 265, 268, 271, 274, 278, 281, 284, 287, 291, 294, 298, 301, 305, 308, 312, 315, 319, 323, 326, 330, 334, 338, 342, 346, 350, 354, 358, 362, 366, 371, 375};
float hiWeights[240] = {0.25366923, 0.98147106, 0.69847526, 0.41547946, 0.13248366, 0.84334283, 0.54879304, 0.25424324, 0.9581124, 0.65200873, 0.34590505, 0.03980138, 0.72364622, 0.40598878, 0.08833133, 0.76233294, 0.43312181, 0.10391069, 0.76679268, 0.42602796, 0.08526323, 0.7358358, 0.38351755, 0.0311993, 0.6683507, 0.304479, 0.9387215, 0.5632964, 0.1878713, 0.80667442, 0.41969598, 0.03271754, 0.63516261, 0.23663088, 0.83340573, 0.42332077, 0.01323581, 0.59197054, 0.17033238, 0.74180828, 0.30861697, 0.87210328, 0.42735885, 0.98216279, 0.52586527, 0.06956775, 0.60347857, 0.13562799, 0.65957357, 0.18016997, 0.69355523, 0.20259863, 0.70485651, 0.20234694, 0.69293648, 0.17887395, 0.65727847, 0.13166302, 0.59738858, 0.06022022, 0.51279413, 0.96331646, 0.40304234, 0.8395261, 0.26769913, 0.68972774, 0.10634793, 0.51352133, 0.91700779, 0.31052234, 0.69839917, 0.08036093, 0.45227206, 0.8194273, 0.1782835, 0.52879944, 0.8739099, 0.20966059, 0.537505, 0.85933879, 0.17198402, 0.47596715, 0.77337452, 0.06291431, 0.34192445, 0.61382986, 0.87837858, 0.13326029, 0.37865545, 0.61621302, 0.84570341, 0.0659271, 0.27557485, 0.47671635, 0.66914153, 0.85264629, 0.02665937, 0.18949267, 0.34301425, 0.48703643, 0.62137657, 0.74585689, 0.86030425, 0.96454996, 0.05769466, 0.14002174, 0.21182256, 0.27294085, 0.3232242, 0.36252387, 0.39069469, 0.40759493, 0.41308617, 0.4070332, 0.3893039, 0.35976912, 0.31830261, 0.26478091, 0.19908325, 0.12109148, 0.03068998, 0.92700917, 0.81026136, 0.68066503, 0.53811606, 0.3825124, 0.21375406, 0.031743, 0.83480225, 0.62401624, 0.39960397, 0.16147643, 0.90871259, 0.64047411, 0.35818046, 0.06175047, 0.7489115, 0.42115231, 0.07894618, 0.71985468, 0.34541939, 0.95588427, 0.54858409, 0.12634222, 0.6865953, 0.23068855, 0.75769633, 0.26755763, 0.76021249, 0.23530087, 0.69254555, 0.13234436, 0.55316859, 0.95687473, 0.34062131, 0.70631945, 0.05350582, 0.38029673, 0.68836991, 0.97735259, 0.24525233, 0.49336946, 0.72150687, 0.92932499, 0.11575798, 0.2809269, 0.42496489, 0.54756135, 0.6484133, 0.72722507, 0.78370805, 0.81758045, 0.82856706, 0.81639899, 0.7808135, 0.72155376, 0.63836868, 0.53101268, 0.39924555, 0.24283225, 0.06154277, 0.85439556, 0.62149326, 0.36294696, 0.07854733, 0.7669326, 0.4285637, 0.06364123, 0.67039303, 0.24981019, 0.80108843, 0.32370567, 0.81784107, 0.28257136, 0.71797072, 0.123776, 0.49891707, 0.84413174, 0.15823191, 0.44088892, 0.69228709, 0.91194972, 0.09900694, 0.25319699, 0.37443675, 0.46229071, 0.51633365, 0.5361503, 0.521335, 0.47149136, 0.38623194, 0.26517798, 0.10795907, 0.91390376, 0.68245696, 0.41366756, 0.1071984, 0.76190257, 0.37779441, 0.95478079, 0.49132081, 0.98835918, 0.44391355, 0.85887543, 0.23188402, 0.56273583, 0.8512475, 0.09650419, 0.29788719, 0.45526317, 0.56805319, 0.63569197, 0.65762745, 0.63332031, 0.56224356, 0.44388206, 0.27773221, 0.06330151, 0.79956868, 0.48631292};
// End


// FFT variables
float concatFreqData[1024] = {};
kiss_fft_cpx autocorrComplexData[512] = {};

extern "C"
EMSCRIPTEN_KEEPALIVE
void processFreqData(float *data) {

    // First perform the rescaling operation.

    // Decimal -> Decibel conversion is 20 * log10(x)
    // So we want to do 10^(x/20)
    // But remember we are using a "k" value (see ff_config.py) of 1/6.
    // So we want to do:
    //      (10^(x/20))^(1/3)
    // Which is equal to
    //      cbrt(10)^(x/20)

    // Aside:
    //  We use cube root even though our k value is 1/6. Because The k value
    //  is defined relative to Re^2 + Im^2 whereas the web audio spec gives
    //  getFloatFrequencyData values as |X[k]| ie sqrt(Re^2 + Im^2). That is,
    //  a power of a half is already accounted for. Therefore we only need
    //  to 'power down' by another factor of a third to take us to 1/6.

    for(int i = 0; i < 512; i++) {
        data[i] = pow(powBase, data[i] / 20.0);
    }

    // getFloatFrequencyData returns only the left side of the symmetric
    //  FFT spectrum. We know it's symmetric because audio data samples
    //  can only be real. But we need a 1024-length input vector for
    //  the second FFT.
    for(int i = 0; i < hsize; i++) {
        concatFreqData[i] = data[i];
    }

    // Mirror image for second half of spectrum
    for(int i = hsize + 1; i < size; i++) {
        concatFreqData[i] = data[size - i];
    }

    // Set middle value.
    //  It appears as though web FFT implementation returns one fewer
    //  piece of information than scipy (but this probably isn't the case).
    //  (it doesn't make much difference as it's such a high frequency anyway)
    concatFreqData[hsize] = data[hsize - 1];

    // Now carry out the second FFT.
    kiss_fftr_cfg cfg = kiss_fftr_alloc(1024, 0, NULL, NULL);
    kiss_fftr(cfg, concatFreqData, autocorrComplexData);
    kiss_fftr_free(cfg);

    // Note we don't read every value in data[i], that is there are
    //  FFT bins discarded by this step. We don't care about very
    //  low or very high frequencies.
    for(int i = 0; i < numResampledBins; i++) {
        //  Resample data to be on a 'linear' scale. (That is, musically
        //      linear ie ascending linearly through the MIDI notes.)
        data[i] = (
            autocorrComplexData[loIndices[i]].r * loWeights[i] +
            autocorrComplexData[hiIndices[i]].r * hiWeights[i]
        );
    }

    for(int i = 0; i < numResampledBins; i++) {
        // Copy result back to buffer exposed to javascript to view results
        // NOTE from the structuring of the FFT library all the real elements
        //  are before all the imaginary elements. We never access the
        //  imaginary part of the array (second half), as we're only
        //  interested in the real part.
        data[i] = fmax(0.0, data[i]);
    }
}

// Surma has these functions at
//  https://gist.github.com/surma/d04cd0fd896610575126d30de36d7eb6
//  https://developers.google.com/web/updates/2018/08/embind (not using embind though)

extern "C"
EMSCRIPTEN_KEEPALIVE
int mallocWrapper(int size) {
    return (int)malloc(size);
}

extern "C"
EMSCRIPTEN_KEEPALIVE
void freeWrapper(int p) {
  free((void *)p);
}